name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Create application properties file
        run: |
          mkdir -p src/main/resources
          cat << EOF > src/main/resources/application-prod.properties
          spring.datasource.url=jdbc:postgresql://${{ secrets.EC2_HOST }}:5432/petclinic
          spring.datasource.username=petclinic
          spring.datasource.password=petclinic
          spring.profiles.active=postgres,prod
          EOF

      - name: Copy files to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Create the deployment directory
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST 'mkdir -p ~/petclinic'
          
          # Copy the JAR file and properties
          scp -i private_key.pem target/*.jar $EC2_USERNAME@$EC2_HOST:~/petclinic/app.jar
          scp -i private_key.pem src/main/resources/application-prod.properties $EC2_USERNAME@$EC2_HOST:~/petclinic/
          
          # Create and copy the start script
          cat << EOF > start.sh
          #!/bin/bash
          cd ~/petclinic
          java -jar app.jar --spring.config.location=file:./application-prod.properties
          EOF
          
          chmod +x start.sh
          scp -i private_key.pem start.sh $EC2_USERNAME@$EC2_HOST:~/petclinic/
          
          # Cleanup
          rm private_key.pem start.sh

      - name: Start application
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Stop any existing instance
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST 'pkill -f petclinic || true'
          
          # Start the application
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST 'cd ~/petclinic && nohup ./start.sh > app.log 2>&1 &'
          
          # Cleanup
          rm private_key.pem
